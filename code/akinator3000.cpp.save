#include "../include/akinator3000.h"

//-----------------------------------------------------------------------------

int main ()
{
    Node *Root = create_node ();
    Root->value = 300;

    for(int i = 0; i < 4; i++)
    {
        get_node (Root);
    }

    return 0;
}

//-----------------------------------------------------------------------------

Node *create_node ()
{
    Node *New_node = (Node*) calloc (1, sizeof (Node));

    if(!New_node)
    {
        printf ("ERROR -memory allocation for new node!\n");
    }

    else
    {
        New_node->Parent = NULL;
        New_node->Left   = NULL;
        New_node->Right  = NULL;

        New_node->value = 0;
    }

    return New_node;
}

//-----------------------------------------------------------------------------

void insert_node (Node *Root, int value)
{
    Node *Curr_node = Root;
    Node *New_node  = create_node ();

    if(Curr_node->value >= value)
    {
        if(Curr_node->Left)
        {
            insert_node (Curr_node->Left, value);
        }

        else
        {
            Curr_node->Left  = New_node;
            New_node->Parent = Curr_node;
            New_node->value  = value;
        }
    }

    else
    {
        if(Curr_node->Right)
        {
            insert_node (Curr_node->Right, value);
        }

        else
        {
            Curr_node->Right = New_node;
            New_node->Parent = Curr_node;
            New_node->value  = value;
        }
    }
}

//-----------------------------------------------------------------------------

void print_tree_preorder (Node *Root)
{
    Node *Curr_node = Root;

    if(!Curr_node)
    {
        return;
    }

    printf ("(%d", Curr_node->value);

    if(Curr_node->Left)  print_tree_preorder (Curr_node->Left);
    if(Curr_node->Right) print_tree_preorder (Curr_node->Right);

    printf (")");
}

//-----------------------------------------------------------------------------

void print_tree_inorder (Node *Root)
{
    Node *Curr_node = Root;

    if(!Curr_node)
    {
        return;
    }

    printf ("(");

    if(Curr_node->Left)  print_tree_inorder (Curr_node->Left);

    printf ("%d", Curr_node->value);

    if(Curr_node->Right) print_tree_inorder (Curr_node->Right);

    printf (")");
}

//-----------------------------------------------------------------------------

void print_tree_postorder (Node *Root)
{
    Node *Curr_node = Root;

    if(!Curr_node)
    {
        return;
    }

    printf ("(");

    if(Curr_node->Left)  print_tree_postorder (Curr_node->Left);

    if(Curr_node->Right) print_tree_postorder (Curr_node->Right);

    printf ("%d)", Curr_node->value);
}

//-----------------------------------------------------------------------------

void get_node (Node *Root)
{
    int value = 0;

    scanf ("%d", &value);

    insert_node (Root, value);

    printf ("\n");
}

//-----------------------------------------------------------------------------

void menu (Node *Root)
{
    int cmd = -1;
    int flag = 0;

    printf ("____________________________________________________| QUEUE |____________________________________________________\n\n");
    printf ("------------------------------------------------------------\n");
    printf ("1                  - get_node \n\n");
    printf ("2                  - print_tree_preorder \n\n");
    printf ("3                  - push  to end elem with this key and value\n\n");
    printf ("4                  - check empty\n\n");
    printf ("0                  - |||STOP|||\n\n");
    printf ("------------------------------------------------------------\n");

    while (cmd != 0 && flag < ERROR_FLAG)
    {
        int par1 = 0;

        scanf ("%d", &cmd);

        if(cmd == 1)
        {
            get_node (Root);
        }

        else if(cmd == 7)
        {
            printf ("\n%d \n", check_empty (&Lst));
        }

        else if(cmd == 8)
        {
            clear_list (&Lst);
        }

        else if(cmd == 9)
        {
            print_list (&Lst);
        }

        else if(cmd == 10)
        {
            if(!check_empty (&Lst))
            {
                pop_head (&Lst);
            }

            else printf ("EMPTY\n");
        }

        else if(cmd == 11)
        {
            printf ("size: %d\n", find_length (&Lst));
        }

        else if(cmd == 0)
        {
            printf ("--------------------STOP--------------------");
        }

        else printf ("-?-");
        flag++;
    }
}

//-----------------------------------------------------------------------------
